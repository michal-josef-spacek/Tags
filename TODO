TODO
====
7. Data optimalization.
   Viz Tags::Process::DataOptimalization
10. Pridat Tags::Process::Filter s callback funkcemi navazanymi na tagy.
12. Optimalizovat deni ve vystupnich rutinach. Casto se tam pouziva stejny kod
    (?, _, -, CD) pro vystup pole dat.
14. Pokud bude tolik procesnich trid, nebude lepsi to pak nejak prepsat?
    [Struktura] -> Validator(jenom co muze byt za cim) -> Entitator? 
    -> Kontrola xml? -> Indenter
22. class v atributu muze mit vice moznosti, takze 
    ['a', 'class', 'neco'] + ['a', 'class', 'neco_jineho'] by se melo sloucit.
27. XML vystup muze byt pouze malymi pismeny. Kde jsem na toto prisel?
30. Do Tags::Output::LibXML jsem pridal detekci druheho root tagu a k tomu
    patricny error. Tohle by melo byt i v ostatnich vystupech v xml modu.
34. Podobne jako v Tags::Output::LibXML resit i v ostatnich cdata sekci s
    ']]>'.
38. Attribute callback (vhodne pro prekodovani do utf a nahradu uvozovek).
40. encode_base_entities v Tags::Utils patri jeste proverit.
    Vzhledem k tomu, ze potrebujeme menit ruzne entity, bylo by dobre udelat
    nejakou skupinu procedur.
    - attributy: klic    : Zacina nejakym znakem a uvnitr muzou byt nejake
                           znaky.
               : hodnota : Nesmi obsahovat <& a uvozovku, v ktere je to
                           obsazeno.
    - text: Nesmi obsahovat <&
41. Cover testing.
43. ex10.pl v perl/MODULES/Tags::Output::Indent do testu.
45. Predelat testovani. Idealni by bylo mit na jednom miste vstupni data. 
48. Zalozit nejaky module Tags::*::Multi? Ktery by dostal pole objektu a
    postupne by je volal a provadel celou funkcnost.
54. V Skim::Storage::InfoStorage::XML::Output::Tags byl kod:
    $self->{'e_atr'} = Tags::Process::EntitySubstitute->new(
            'entity' => {
                    '"' => '&quot;',
                    '<' => '&lt;',
                    '&' => '&amp;',
            },
    );
    Ktery se pak volal $self->{'e_atr'}->encode($struct_r->{$key}) v
    $tags->put. Tohle ted dela automaticky pomoci callbacku. Bylo by mozne
    tohle nejak zaclenit do tech callbacku, nebo je ten modul uplne zbytecny?
55. V atributech by se melo predelat zpracovani. Co muze byt v klici?
    Na hodnotu by se mel aplikovat attr_callback(), ted se aplikuje na obe.
56. Testy pro atribut s uvozovkami a dalsimi chybnymi znaky.
58. Udelat univerzalni Tags::Output, abych nemusel rucne ve skriptech prepinat?
59. Pokud mam v Tags::Utils v $ATTR_CHARS >"<, tak to plati jenom pro attr
    separator s >"<. Nefunguje pro attr separator s >'<.
61. Test pro data_callback s prikladem callbacku s Tags::Output::Raw dokumentace
    a vstupu v utf8. ex35.pl priklad.
62. Test na situaci, kdy mam data ['d', undef],
63. Pokud je na tag preserve a je zapnuty XML mod, tak spatne vykresluji
    zjednodusene tagy. Nemel bych za zjednodusenym tagem davat "\n"
    Viz /perl/MODULES/Tags-Output-Raw> ./ex37.pl 1
    <head><script language="javascript" type="text/javascript" src="/javascript/jquery/jquery.js" />
    <script language="javascript" type="text/javascript" src="/javascript/jquery-ui/jquery-ui.js" />
    </head>
64.

Applied
=======
3. Predelat Carp na Error::Simple.
OK [20050926] skim

6. Predelat podobne jako Tags tak, aby vzdycky sel vystup do handleru.
OK [20051121] skim

4. Chyba v Tags.pm, kde pri comment a data vykresluji ' '. Je to nesmysl treba 
   na zacatku dat.
OK [20070124] skim

5. Trida pro vystup do PYX.
   Viz Tags::Output::PYX.
OK [20070218] skim

8. Do SESIS pridat cdata sekci.
OK [20070219] skim

1. Jedna pripominka proti Tags: Vrati se cely tag a teprve potom se indentuje.
   Lepsi by bylo vratit jeste tu neslozenou strukturu a ty indentovane
   vykreslit. Tohle by nemel byt problem na takovychhle datech.
Tohle je prvotni cil. 
OK [20070219] skim

11. V tech vykreslovacich by nemely byt kontroly na nic. V Raw mam kontrolu na
    data. V Indent mam vice kontrol. Tohle by melo byt ve validatoru.
Z 'Raw' odstranena kontrola na komentare.
I z 'Indent' odstraneno.
OK [20070219] skim

13. Na reseni entit by mohla byt taky vlastni procesni trida.
OK [20070221] skim

16. Do entit pridat encode a decode utf znaku? (&#cislo)
OK [20070224] skim

9. Do Tags::Output::Raw zaimplementovat preserve veci.
OK [20070920] skim

2. Pridat indentovani.
   Viz Tags::Output::Indent.
OK [20070920] skim

26. Tags::Output::Raw nevypise nexml vystup. Kdyz neukoncim tag, tak zahlasi error.
    Patri resit / v simple tagu. Nevim jak je to v sgml.
Do Tags::Output::Raw jsem pridal xml parameter.
Pridany testy.
Jeden error je vazan na tenhle xml parametr.
no_simple pro sgml.
OK [20080718] skim

28. Chyba ve vykreslovani pomoci perl/MODULES/Tags::MARC::Field/ex2.pl
OK [20081105] skim

20. Predelat ve vsech Tags::Output::* reset. Reset se vola v konstruktoru.
    A metode reset bude vsechno, co jde resetovat.
OK [20090101] skim

19. Implementovat do vsech Tags::Output::* parametr instruction.
OK [20090101] skim

17. Tags::Output::Raw a jine by mely byt dohromady s dtd, protoze treba
    xml:space FIXED znamena, ze je preserved, ale neni to krome dtd nikde videt.
Tohle by slo resit tak:
1) S validatorem (mel by dtd), predal by seznam preserved veci z dtd.
2) Bez validatoru. Rucne bych pridal seznam preserved veci, ktere jsou v dtd.
NONE [20090101] skim

33. Metodu _encode_newline do Utils.
OK [20090102] skim

32. V Tags::Output::PYX prepsat 'flush_code' na pole, namisto skaralu.
OK [20090102] skim

31. V Tags::Output::Raw prepsat 'flush_code' na pole, namisto skalaru.
U tohohle modulu a u Tags::Output::Indent a Tags::Output::Indent2 to jit
nemuze. Dostaneme se do problemu s raw kodem. Uz by nebyl raw, ale raw+"\n".
NONE [20090102] skim

15. Testy.
Z velke vetsiny hotovy.
OK [20090102] skim

18. Predelat testy tak, aby se nemuselo pouzivat IO::Scalar pro prebirani
    vystupu ze stdout. Udelat test na stdout.
Tohle je obsolete.
NONE [20090102] skim

25. Opravit zobrazovani raw tagu za nevykreslenym tagem.
    Pr: ['b', 'tag'], ['r', 'raw'], ['e', 'tag']: Melo by vykreslit
    <tag>raw</tag>
OK [20090104] skim

42. ex10.pl v perl/MODULES/Tags::Output::Indent
OK [20090301] skim

44. Validni vystup pro SGML je <input ... readonly>. To stejne je 
    <input ... readonly="readonly">. Prvni pripad asi nedovedu vykreslit, ze?
Dovedu. Predelal jsem _put_attributes pro brani argumentu ($attr, $value).
Tudiz jenom jeden argument. Pro sgml mod se vykresli <tag readonly>, pro xml mod
se vyhodi error.
OK [20090418] skim

47. Predelat jednotlive funkce v Core na funkce z Debug? A zrusit Debug?
OK [20090418] skim

37. Proc nefunguje perl t/03_.... ? Nedojde do konce.
Nic takoveho uz po prepisu testu neni.
NONE [20090419] skim

46. Ma v SESIS smysl CD a R? V tom vystupu by to melo byt normalne jako '-'.
Ma to smysl, kdyz to chci rucne odlisit.
NONE [20090622] skim

50. Predelat system podobne jako CSS::Structure na lepsi tvoreni objektu.
    _default_parameters apod.
OK [20090622] skim

49. Podminku >>Check to 'tmp_code'.<< presunout do vlastni funkce. Slo by
    zoptimalizavat tak, aby to bylo v Core?
Tohle je problematicke. Mozna by bylo dobre mit nejakou tridu ObjectUtils, kde
tyto veci budou.
NONE [20090622] skim

52. Chyba v hodnote atributu nabyvajici '0'.
OK [20090728] skim

53. Nedostatecne testuji auto_flush. V prikladu s (['b', 'tag'], ['e', 'tag'])
    je to vpohode.. Ale v pripadu toho stejneho s volanim kazdeho tagu
    samostatne je chyba. Dodelat stejny test pro Tags::Output::Raw.
OK [20090815] skim

39. K data callbacku pridano defaultni encode_base_entities().
    Pridat cdata_callback a raw_callback.
    Pridat testy.
Tags::Output::Raw hotovo.
Tags::Output::Indent hotovo.
Jsou zde data_callback, attr_callback, cdata_callback, raw_callback.
data_ ma nastaveno implicitne encode_char_entities (nahrada base_entities).
attr_ ma nastaveno implicitne encode_attr_entities
a zbytek undef.
OK [20090922] skim

57. Implementovat output_callback.
OK [20090922] skim

60. Tags::Output::Core predelat na Tags::Output, coz bude zakladni trida pro
    check pomoci isa().
OK [20120925] skim

21. Docela neprakticke je dat komentar mezi zacatek tagu a atribut. Pak je
    error. Bylo by dobre to presunout za/pred tag.
Tags::Output::Raw je hotov.
Tags::Output::Indent je hotov.
Presunuto do patricnych trid.
OK [20141107] skim

29. Pridat xml parameter.
Tags::Output::Raw je.
Tags::Output::Indent je.
OK [20141107] skim

23. V Tags::Output::Indent se muze rozdelit atribut na novy radek. To muze?
Presunuto do patricneho modulu.
NONE [20141107] skim

24. Tags::Output::Indent prepsat. Kod, ke je prehazovani comment pred/za tag je
    neefektivni. Idealni to resit pred timto modulem primo na strukture.
Presunuto do patricneho modulu.
NONE [20141107] skim

35. Prozkoumat v Tags::Output::Indent volani 'indent_block'. Mohla by tam byt
    stejna chyba jako u 'indent_word', ze se bere pole misto skalaru.
    Mozna by bylo dobre vubec zvazit uziti vraceni skalaru z indent funkci.
NONE [20141107] skim

36. Data callback (vhodne pro prekodovani do utf8).
Tags::Output::Indent hotovo.
Tags::Output::LibXML hotovo.
Tags::Output::Raw hotovo.
OK [20141107] skim
